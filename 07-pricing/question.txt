We have now seen how we can create a number of different types of houses, and then put those houses into neighborhoods. But right now, there is no difference between our different house types, other than the fact that they have different default sizes.

The time has come for us to change that. This week, we're going to explore the idea of "polymorphism," one of the key ideas in the world of object-oriented programming.

Polymorphism doesn't have anything to do with Harry Potter. Rather, it's the idea that several different types can implement the same interface (i.e., method), but produce different results. A classic example is to have classes for different animals, such as Duck, Cow, and Dog. You can then say:

    duck = Duck()
    cow = Cow()
    dog = Dog()

    duck.speak()   # returns 'quack'
    cow.speak()    # returns 'cow'
    dog.speak()    # returns 'bow wow'

Each of these classes implements the "speak" method, but the results are different.

Why would we care about this? Because in the world of dynamic programming languages, we use what's known as "duck typing," a term that has nothing to do with the aforementioned duck. This term comes from the phrase, "If it walks like a duck, and quacks like a duck, then it's a duck."

In other words: In Python, we don't care what an object *is*. Rather, we care what it *does*.  Our functions, as a general rule, don't check what types we're passing (although Mypy is changing that a bit). Rather, we care whether an object implements a particular method, and thus adheres to an API.

This week, we're going to implement a simple version of that, by adding property taxes to our homes. That is: We're going to add a new "calculate_tax" on each home. The base tax will be 100 currency units for every 1 square meter in your home. Thus, a 50m home will owe 50 * 100 = 5,000 in tax.  And a 100m home will owe 100 * 100 = 10,000 in tax.

But wait: Each type of home will then take this base calculation, and adjust it in a certain way:

- Apartments only pay 75% of this amount.

- Town houses pay the full amount.

- Single-family homes pay 120% on the first 150m, and then 150% on any square meters beyond that.

So a 50m apartment will pay 50 * 100 * 0.75, or 3,750 in tax.

A 50m single-family home (which is a pretty small single-family home, I'll admit!) will pay 50 * 100 * 1.2, or 6,000.

A 200m single-family home will pay 150 * 100 * 1.2 + 50 * 100 * 1.5, or 25,500.

(If you didn't trust my urban-planning policies in earlier exercises, then I hope you have similarly learned to distrust my tax policies in this exercise.)

Once you've finished implementing the "calculate_tax" method on each of the subclasses of "House", I want you to create a "calculate_tax" method for the "Neighborhood" class, which will return the total tax that you'll get from a neighborhood.

You might notice that this new idea is powerful and interesting, but doesn't require any new syntax. However, it's a very common use case in the world of objects; you'll encounter it all of the time.

I'll be back on Monday with the solution.

Until then,

Reuven

   
